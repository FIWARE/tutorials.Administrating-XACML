{
	"info": {
		"_postman_id": "59ce8a5e-c01f-4d7b-964e-64dd67f2fce5",
		"name": "FIWARE Adminstrating XACML",
		"description": "[![FIWARE Security](https://nexus.lab.fiware.org/repository/raw/public/badges/chapters/security.svg)](https://www.fiware.org/developers/catalogue/)\n\nThis tutorial introduces an additional security generic enabler - **Authzforce**\nand adds fine grained control to the security rules generated by **Keyrock**.\nAccess to the entities created in the\n[previous tutorial](https://github.com/Fiware/tutorials.PEP-Proxy) is now\nconfigured and controlled using an XACML access control policy - this creates a\nflexible ruleset which can be uploaded and reinterpreted on the fly so complex\nbusiness rules can be created and changed according to current circumstances.\n\nThe tutorial discusses code showing how to integrate **Authzforce** within a web\napplication and demonstrates examples of **Authzforce** XACML Server-PDP\ninteractions. [cUrl](https://ec.haxx.se/) commands are used to show the\ninteractions between generic enablers.\n\nThe `docker-compose` files for this tutorial can be found on GitHub: \n\n![GitHub](https://fiware.github.io/tutorials.XACML-Access-Rules/icon/GitHub-Mark-32px.png) [FIWARE 405: Ruleset Based Permissions](https://github.com/Fiware/tutorials.XACML-Access-Rules)\n\n\n# Ruleset Based Permissions\n\n> \"Say: Come, I will rehearse what _Allah_ hath prohibited you from:\n>\n> -   Join not anything as equal with _Him_\n> -   Be good to your parents\n> -   Kill not your children on a plea of want - _We_ provide sustenance for you\n>     and for them\n> -   Come not nigh to shameful deeds. Whether open or secret\n> -   Take not life, which _Allah_ hath made sacred, except by way of justice\n>     and law\n>\n> thus doth _He_ command you, that ye may learn wisdom.\"\n>\n> — Quran 6.151, Sūrat al-Anʻām\n\n[Previous tutorials](https://github.com/Fiware/tutorials.Securing-Access) have\nintroduced a simple access control system based on authentication (level 1) or\nbasic authorization access to resources based on a role (level 2). These\npolicies are easy to create, but the rules within them are very black and white,\nrules cannot rely on one another, have exception clauses or offer access based\non time limits or attribute values. There is also no mechanism to resolve\ndifferent rules in the case of conflict.\n\nTo satisfy a complex access control scenario, an additional arbitration\nmicroservice is required, which is able to come to a judgement on each\nPermit/Deny policy decision by reading and interpreting the full set of access\ncontrol rules, and based their judgement on the evidence provided by the\nrequesting service.\n\nFIWARE [Authzforce](https://authzforce-ce-fiware.readthedocs.io/) is a service\nwhich is able to provide such an interpretive Policy Decision Point (PDP). It is\nan advanced access control Generic Enabler which is able to interpret rules\nsupplied using the\n[XACML standard](https://www.oasis-open.org/committees/tc_home.php?wg_abbrev=xacml).\nRulesets can be amended and uploaded at any time providing a flexible method to\nmaintain security policies which can change according to business need.\nFurthermore the language used to describe the access policy is designed to be\nhighly extensible and cover any access control scenario.\n\n## What is XACML\n\neXtensible Access Control Markup Language (XACML) is a vendor neutral\ndeclarative access control policy language. It was created to promote common\naccess control terminology and interoperability. The architectural naming\nconventions for elements such as Policy Execution Point (PEP) and Policy\nDecision Point (PDP) come from the XACML specifications.\n\nXACML policies are split into a hierarchy of three levels - `<PolicySet>`,\n`<Policy>` and `<Rule>`, the `<PolicySet>` is a collection of `<Policy>`\nelements each of which contain one or more `<Rule>` elements.\n\nEach `<Rule>` within a `<Policy>` is evaluated as to whether it should grant\naccess to a resource - the overall `<Policy>` result is defined by the overall\nresult of all `<Rule>` elements processed in turn. Separate `<Policy>` results\nare then evaluated against each other using combining alogorthms define which\n`<Policy>` wins in case of conflict.\n\nA `<Rule>` element consists of a `<Target>` and a `<Condition>`. This is an\nexample `<Rule>`, it states access will be granted (`Effect=\"Permit\"`) when a\nPOST request is sent to the `/bell/ring` endpoint, provided that the\n`subject:role` has been provided and that the\n`role=security-role-0000-0000-000000000000` :\n\n```xml\n<Rule RuleId=\"alrmbell-ring-0000-0000-000000000000\" Effect=\"Permit\">\n  <Description>Ring Alarm Bell</Description>\n  <Target>\n    <AnyOf>\n      <AllOf>\n        <Match MatchId=\"urn:oasis:names:tc:xacml:1.0:function:string-equal\">\n          <AttributeValue DataType=\"http://www.w3.org/2001/XMLSchema#string\">/bell/ring</AttributeValue>\n          <AttributeDesignator Category=\"urn:oasis:names:tc:xacml:3.0:attribute-category:resource\" AttributeId=\"urn:thales:xacml:2.0:resource:sub-resource-id\" DataType=\"http://www.w3.org/2001/XMLSchema#string\" MustBePresent=\"true\" />\n        </Match>\n      </AllOf>\n    </AnyOf>\n    <AnyOf>\n      <AllOf>\n        <Match MatchId=\"urn:oasis:names:tc:xacml:1.0:function:string-equal\">\n          <AttributeValue DataType=\"http://www.w3.org/2001/XMLSchema#string\">POST</AttributeValue>\n          <AttributeDesignator Category=\"urn:oasis:names:tc:xacml:3.0:attribute-category:action\" AttributeId=\"urn:oasis:names:tc:xacml:1.0:action:action-id\" DataType=\"http://www.w3.org/2001/XMLSchema#string\" MustBePresent=\"true\" />\n        </Match>\n      </AllOf>\n    </AnyOf>\n  </Target>\n  <Condition>\n    <Apply FunctionId=\"urn:oasis:names:tc:xacml:3.0:function:any-of\">\n      <Function FunctionId=\"urn:oasis:names:tc:xacml:1.0:function:string-equal\" />\n      <AttributeValue DataType=\"http://www.w3.org/2001/XMLSchema#string\">security-role-0000-0000-000000000000</AttributeValue>\n      <AttributeDesignator Category=\"urn:oasis:names:tc:xacml:1.0:subject-category:access-subject\" AttributeId=\"urn:oasis:names:tc:xacml:2.0:subject:role\" DataType=\"http://www.w3.org/2001/XMLSchema#string\" MustBePresent=\"false\" />\n    </Apply>\n  </Condition>\n</Rule>\n```\n\nThis is a very verbose method for creating a simple Verb-Resource access rule,\nbut unlike simple Verb-Resource rules, with XACML, other more complex\ncomparisons can be made, for example checking that time is before a certain hour\nof day, or checking that a URL starts with or contains a certain string.\nConditions can be specified down to the attribute level or combined to make\ncomplex calculations, for example - an XACML `<Rule>` could be created to apply\nthe following policy:\n\n> _A store manager is able to amend Product prices only the first of the month,\n> and can only alter prices of products she or her immediate superior has\n> created in the first place_\n\nSuch a `<Rule>` would require that the `<Condition>` includes separate\nclauses/clarifications for the following:\n\n-   What is the User's role? (e.g. `manager`)\n-   What action is being invoked? (e.g PATCH or PUT)\n-   Which resource is being protected URL string? (e.g. `/v2/entities`)\n-   What other information must be present in the body of the request? (e.g.\n    Entity `type` must equal `Product`)\n-   When is the resource being requested? (e.g. the current date)\n-   What other additional information must be retrieved from elsewhere prior to\n    making the request\n    -   Who created the entity? Is it me or my manager?\n\nAs you can see these rules can quickly become very complex. For this initial\nintroduction to XACML, the basic rule set used will be kept as simple as\npossible to avoid unnecessary confusion, suffice it to say that an access policy\nbased on XACML can be expanded to fit the security needs of any complex system.\n\n# Prerequisites\n\n## Docker\n\nTo keep things simple all components will be run using\n[Docker](https://www.docker.com). **Docker** is a container technology which\nallows to different components isolated into their respective environments.\n\n-   To install Docker on Windows follow the instructions\n    [here](https://docs.docker.com/docker-for-windows/)\n-   To install Docker on Mac follow the instructions\n    [here](https://docs.docker.com/docker-for-mac/)\n-   To install Docker on Linux follow the instructions\n    [here](https://docs.docker.com/install/)\n\n**Docker Compose** is a tool for defining and running multi-container Docker\napplications. A\n[YAML file](https://raw.githubusercontent.com/Fiware/tutorials.Identity-Management/master/docker-compose.yml)\nis used configure the required services for the application. This means all\ncontainer services can be brought up in a single command. Docker Compose is\ninstalled by default as part of Docker for Windows and Docker for Mac, however\nLinux users will need to follow the instructions found\n[here](https://docs.docker.com/compose/install/)\n\n## Cygwin\n\nWe will start up our services using a simple bash script. Windows users should\ndownload [cygwin](http://www.cygwin.com/) to provide a command-line\nfunctionality similar to a Linux distribution on Windows.\n\n# Architecture\n\nThis application adds level 3 Advanced Authorization security into the existing\nStock Management and Sensors-based application created in\n[previous tutorials](https://github.com/Fiware/tutorials.Securing-Access/) and\nsecures access to the context broker behind a\n[PEP Proxy](https://github.com/Fiware/tutorials.PEP-Proxy/). It will make use of\nfive FIWARE components - the\n[Orion Context Broker](https://fiware-orion.readthedocs.io/en/latest/),the\n[IoT Agent for UltraLight 2.0](https://fiware-iotagent-ul.readthedocs.io/en/latest/),\nthe [Keyrock](https://fiware-idm.readthedocs.io/en/latest/) Identity Manager,\nthe [Wilma]() PEP Proxy and the\n[Authzforce](https://authzforce-ce-fiware.readthedocs.io) XACML Server. All\naccess control decisions will be delegated to **Authzforce** which will read the\nruleset from a previously uploaded policy domain.\n\nBoth the Orion Context Broker and the IoT Agent rely on open source\n[MongoDB](https://www.mongodb.com/) technology to keep persistence of the\ninformation they hold. We will also be using the dummy IoT devices created in\nthe [previous tutorial](https://github.com/Fiware/tutorials.IoT-Sensors/).\n**Keyrock** uses its own [MySQL](https://www.mysql.com/) database.\n\nTherefore the overall architecture will consist of the following elements:\n\n-   The FIWARE\n    [Orion Context Broker](https://fiware-orion.readthedocs.io/en/latest/) which\n    will receive requests using\n    [NGSI](https://fiware.github.io/specifications/OpenAPI/ngsiv2)\n-   The FIWARE\n    [IoT Agent for UltraLight 2.0](https://fiware-iotagent-ul.readthedocs.io/en/latest/)\n    which will receive southbound requests using\n    [NGSI](https://fiware.github.io/specifications/OpenAPI/ngsiv2) and convert\n    them to\n    [UltraLight 2.0](https://fiware-iotagent-ul.readthedocs.io/en/latest/usermanual/index.html#user-programmers-manual)\n    commands for the devices\n-   FIWARE [Keyrock](https://fiware-idm.readthedocs.io/en/latest/) offer a\n    complement Identity Management System including:\n    -   An OAuth2 authentication system for Applications and Users\n    -   A site graphical frontend for Identity Management Administration\n    -   An equivalent REST API for Identity Management via HTTP requests\n-   FIWARE [Authzforce](https://authzforce-ce-fiware.readthedocs.io/) is a XACML\n    Server providing an interpretive Policy Decision Point (PDP) access to the\n    **Orion** and/or **IoT Agent** microservices\n-   FIWARE [Wilma](https://fiware-pep-proxy.rtfd.io/) is a PEP Proxy securing\n    access to the **Orion** microservices, it delegates the passing of\n    authorisation decisions to **Authzforce** PDP\n-   The underlying [MongoDB](https://www.mongodb.com/) database :\n    -   Used by the **Orion Context Broker** to hold context data information\n        such as data entities, subscriptions and registrations\n    -   Used by the **IoT Agent** to hold device information such as device URLs\n        and Keys\n-   A [MySQL](https://www.mysql.com/) database :\n    -   Used to persist user identities, applications, roles and permissions\n-   The **Stock Management Frontend** does the following:\n    -   Displays store information\n    -   Shows which products can be bought at each store\n    -   Allows users to \"buy\" products and reduce the stock count.\n    -   Allows authorized users into restricted areas, it also delegates\n        authoriation decisions to the **Authzforce** PDP\n-   A webserver acting as set of\n    [dummy IoT devices](https://github.com/Fiware/tutorials.IoT-Sensors) using\n    the\n    [UltraLight 2.0](https://fiware-iotagent-ul.readthedocs.io/en/latest/usermanual/index.html#user-programmers-manual)\n    protocol running over HTTP - access to certain resources is restricted.\n\nSince all interactions between the elements are initiated by HTTP requests, the\nentities can be containerized and run from exposed ports.\n\n![](https://fiware.github.io/tutorials.XACML-Access-Rules/img/architecture.png)\n\nThe specific architecture of each section of the tutorial is discussed below.\n\n## Keyrock Configuration\n\n```yaml\nkeyrock:\n    image: fiware/idm\n    container_name: fiware-keyrock\n    hostname: keyrock\n    networks:\n        default:\n            ipv4_address: 172.18.1.5\n    depends_on:\n        - mysql-db\n        - authzforce\n    ports:\n        - \"3005:3005\"\n    environment:\n        - DEBUG=idm:*\n        - DATABASE_HOST=mysql-db\n        - IDM_DB_PASS_FILE=/run/secrets/my_secret_data\n        - IDM_DB_USER=root\n        - IDM_HOST=http://localhost:3005\n        - IDM_PORT=3005\n        - IDM_ADMIN_USER=alice\n        - IDM_ADMIN_EMAIL=alice-the-admin@test.com\n        - IDM_ADMIN_PASS=test\n        - IDM_PDP_LEVEL=advanced\n        - IDM_AUTHZFORCE_ENABLED=true\n        - IDM_AUTHZFORCE_HOST=authzforce\n        - IDM_AUTHZFORCE_PORT=8080\n    secrets:\n        - my_secret_data\n```\n\nThe `keyrock` container is a web application server listening on a single port:\n\n-   Port `3005` has been exposed for HTTP traffic so we can display the web page\n    and interact with the REST API.\n\nThe `keyrock` container is connecting to **Authzforce** and is driven by\nenvironment variables as shown:\n\n| Key                    | Value        | Description                                                                  |\n| ---------------------- | ------------ | ---------------------------------------------------------------------------- |\n| IDM_PDP_LEVEL          | `advanced`   | Flag indicating that **Keyrock** should delegate PDP decisions to Authzforce |\n| IDM_AUTHZFORCE_ENABLED | `true`       | Flag indicating that **Authzforce** is available                             |\n| IDM_AUTHZFORCE_HOST    | `authzforce` | This is URL where the **Authzforce** is found                                |\n| IDM_AUTHZFORCE_PORT    | `8080`       | Port that **Authzforce** is listening on                                     |\n\nThe other `keyrock` container configuration values described in the YAML file\nhave been described in previous tutorials\n\n## PEP Proxy Configuration\n\n```yaml\norion-proxy:\n    image: fiware/pep-proxy\n    container_name: fiware-orion-proxy\n    hostname: orion-proxy\n    networks:\n        default:\n            ipv4_address: 172.18.1.10\n    depends_on:\n        - keyrock\n        - authzforce\n    ports:\n        - \"1027:1027\"\n    expose:\n        - \"1027\"\n    environment:\n        - PEP_PROXY_APP_HOST=orion\n        - PEP_PROXY_APP_PORT=1026\n        - PEP_PROXY_PORT=1027\n        - PEP_PROXY_IDM_HOST=keyrock\n        - PEP_PROXY_HTTPS_ENABLED=false\n        - PEP_PROXY_IDM_SSL_ENABLED=false\n        - PEP_PROXY_IDM_PORT=3005\n        - PEP_PROXY_APP_ID=tutorial-dckr-site-0000-xpresswebapp\n        - PEP_PROXY_USERNAME=pep_proxy_00000000-0000-0000-0000-000000000000\n        - PEP_PASSWORD=test\n        - PEP_PROXY_PDP=authzforce\n        - PEP_PROXY_AUTH_ENABLED=true\n        - PEP_PROXY_MAGIC_KEY=1234\n        - PEP_PROXY_AZF_PROTOCOL=http\n        - PEP_PROXY_AZF_HOST=authzforce\n        - PEP_PROXY_AZF_PORT=8080\n```\n\nThe `orion-proxy` container is an instance of FIWARE **Wilma** listening on port\n`1027`, it is configured to forward traffic to `orion` on port `1026`, which is\nthe default port that the Orion Context Broker is listening to for NGSI\nRequests.\n\nThe `orion-proxy` container is delegating PDP decisions to **Authzforce** and is\ndriven by environment variables as shown:\n\n| Key                    | Value        | Description                                               |\n| ---------------------- | ------------ | --------------------------------------------------------- |\n| PEP_PROXY_PDP          | `authzforce` | Flag ensuring that the PEP Proxy uses Authzforce as a PDP |\n| PEP_PROXY_AZF_PROTOCOL | `http`       | Flag to enable use of the XACML PDP                       |\n| PEP_PROXY_AZF_HOST     | `authzforce` | This is URL where the **Authzforce** is found users       |\n| PEP_PROXY_AZF_PORT     | `8080`       | Port that **Authzforce** is listening on                  |\n\nThe other `orion-proxy` container configuration values described in the YAML\nfile have been described in previous tutorials\n\n## Authzforce Configuration\n\n```yaml\nauthzforce:\n    image: fiware/authzforce-ce-server\n    hostname: authzforce\n    container_name: fiware-authzforce\n    networks:\n        default:\n            ipv4_address: 172.18.1.12\n    ports:\n        - \"8080:8080\"\n    volumes:\n        - ./authzforce/domains:/opt/authzforce-ce-server/data/domains\n```\n\nThe `authzforce` container is listening on port `8080`, where it receives\nrequests to make PDP decisions. A volume has been exposed to upload a\npre-configured domain so that a set of XACML access control policies has already\nbeen supplied.\n\n## Tutorial Security Configuration\n\n```yaml\ntutorial:\n    image: fiware/tutorials.context-provider\n    hostname: tutorial\n    container_name: fiware-tutorial\n    networks:\n        default:\n            ipv4_address: 172.18.1.7\n    expose:\n        - \"3000\"\n        - \"3001\"\n    ports:\n        - \"3000:3000\"\n        - \"3001:3001\"\n    environment:\n        - \"DEBUG=tutorial:*\"\n        - \"WEB_APP_PORT=3000\"\n        - \"KEYROCK_URL=http://localhost\"\n        - \"KEYROCK_IP_ADDRESS=http://172.18.1.5\"\n        - \"KEYROCK_PORT=3005\"\n        - \"KEYROCK_CLIENT_ID=tutorial-dckr-site-0000-xpresswebapp\"\n        - \"KEYROCK_CLIENT_SECRET=tutorial-dckr-site-0000-clientsecret\"\n        - \"CALLBACK_URL=http://localhost:3000/login\"\n        - \"AUTHZFORCE_ENABLED=true\"\n        - \"AUTHZFORCE_URL=http://authzforce\"\n        - \"AUTHZFORCE_PORT=8080\"\n```\n\nThe `tutorial` container is listening on two ports:\n\n-   Port `3000` is exposed so we can see the web page displaying the Dummy IoT\n    devices.\n-   Port `3001` is exposed purely for tutorial access - so that cUrl or Postman\n    can make UltraLight commands without being part of the same network.\n\nThe `tutorial` container is now secured by **Authforce**, and is driven by\nenvironment variables as shown:\n\n| Key                | Value               | Description                                         |\n| ------------------ | ------------------- | --------------------------------------------------- |\n| AUTHZFORCE_ENABLED | `true`              | Flag to enable use of the XACML PDP                 |\n| AUTHZFORCE_URL     | `http://authzforce` | This is URL where the **Authzforce** is found users |\n| AUTHZFORCE_PORT    | `8080`              | Port that **Authzforce** is listening on            |\n\nThe other `tutorial` container configuration values described in the YAML file\nhave been described in previous tutorials\n\n# Start Up\n\nTo start the installation, do the following:\n\n```console\ngit clone git@github.com:Fiware/tutorials.XACML-Access-Rules.git\ncd tutorials.XACML-Access-Rules\n\n./services create\n```\n\n> **Note** The initial creation of Docker images can take up to three minutes\n\nThereafter, all services can be initialized from the command-line by running the\n[services](https://github.com/Fiware/tutorials.XACML-Access-Rules/blob/master/services)\nBash script provided within the repository:\n\n```console\n./services start\n```\n\n> :information_source: **Note:** If you want to clean up and start over again\n> you can do so with the following command:\n>\n> ```console\n> ./services stop\n> ```\n\n### Dramatis Personae\n\nThe following people at `test.com` legitimately have accounts within the\nApplication\n\n-   Alice, she will be the Administrator of the **Keyrock** Application\n-   Bob, the Regional Manager of the supermarket chain - he has several store\n    managers under him:\n    -   Manager1\n    -   Manager2\n-   Charlie, the Head of Security of the supermarket chain - he has several\n    store detectives under him:\n    -   Detective1\n    -   Detective2\n\n| Name       | eMail                     | Password |\n| ---------- | ------------------------- | -------- |\n| alice      | alice-the-admin@test.com  | `test`   |\n| bob        | bob-the-manager@test.com  | `test`   |\n| charlie    | charlie-security@test.com | `test`   |\n| manager1   | manager1@test.com         | `test`   |\n| manager2   | manager2@test.com         | `test`   |\n| detective1 | detective1@test.com       | `test`   |\n| detective2 | detective2@test.com       | `test`   |\n\nThe following people at `example.com` have signed up for accounts, but have no\nreason to be granted access\n\n-   Eve - Eve the Eavesdropper\n-   Mallory - Mallory the malicious attacker\n-   Rob - Rob the Robber\n\n| Name    | eMail               | Password |\n| ------- | ------------------- | -------- |\n| eve     | eve@example.com     | `test`   |\n| mallory | mallory@example.com | `test`   |\n| rob     | rob@example.com     | `test`   |\n",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Authzforce - Adminstrating XACML Policies",
			"item": [
				{
					"name": "Creating a new Domain",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/xml",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n<domainProperties xmlns=\"http://authzforce.github.io/rest-api-model/xmlns/authz/5\" externalId=\"airplane\"/>"
						},
						"url": {
							"raw": "http://{{authzforce}}/authzforce-ce/domains",
							"protocol": "http",
							"host": [
								"{{authzforce}}"
							],
							"path": [
								"authzforce-ce",
								"domains"
							]
						},
						"description": "To create a new domain in **Authzforce**, make a POST request to the\n`/authzforce-ce/domains` endpoint including a unique `external-id` within\nthe `<domainProperties>` element\n\nThe response includes a `href` in the `<n2:link>` element  which holds the\n`domain-id` used internally within **Authzforce**.\n\nAn empty `PolicySet` will be created for the new domain. By default all\naccess will be permitted."
					},
					"response": []
				},
				{
					"name": "Creating an initial PolicySet",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/xml",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<PolicySet xmlns=\"urn:oasis:names:tc:xacml:3.0:core:schema:wd-17\" PolicySetId=\"f8194af5-8a07-486a-9581-c1f05d05483c\" Version=\"1\" PolicyCombiningAlgId=\"urn:oasis:names:tc:xacml:3.0:policy-combining-algorithm:deny-unless-permit\">\n   <Description>Policy Set for Airplane!</Description>\n   <Target />\n   <Policy PolicyId=\"airplane\" Version=\"1.0\" RuleCombiningAlgId=\"urn:oasis:names:tc:xacml:3.0:rule-combining-algorithm:deny-unless-permit\">\n      <Description>Vehicle Roles from the Male announcer in the movie Airplane!</Description>\n      <Target>\n         <AnyOf>\n            <AllOf>\n               <Match MatchId=\"urn:oasis:names:tc:xacml:1.0:function:string-equal\">\n                  <AttributeValue DataType=\"http://www.w3.org/2001/XMLSchema#string\">airplane!</AttributeValue>\n                  <AttributeDesignator Category=\"urn:oasis:names:tc:xacml:3.0:attribute-category:resource\" AttributeId=\"urn:oasis:names:tc:xacml:1.0:resource:resource-id\" DataType=\"http://www.w3.org/2001/XMLSchema#string\" MustBePresent=\"true\" />\n               </Match>\n            </AllOf>\n         </AnyOf>\n      </Target>\n      <Rule RuleId=\"white-zone\" Effect=\"Permit\">\n         <Description>The white zone is for immediate loading and unloading of passengers only</Description>\n         <Target>\n            <AnyOf>\n               <AllOf>\n                  <Match MatchId=\"urn:oasis:names:tc:xacml:1.0:function:string-equal\">\n                     <AttributeValue DataType=\"http://www.w3.org/2001/XMLSchema#string\">white</AttributeValue>\n                     <AttributeDesignator Category=\"urn:oasis:names:tc:xacml:3.0:attribute-category:resource\" AttributeId=\"urn:thales:xacml:2.0:resource:sub-resource-id\" DataType=\"http://www.w3.org/2001/XMLSchema#string\" MustBePresent=\"true\" />\n                  </Match>\n               </AllOf>\n            </AnyOf>\n            <AnyOf>\n               <AllOf>\n                  <Match MatchId=\"urn:oasis:names:tc:xacml:1.0:function:string-equal\">\n                     <AttributeValue DataType=\"http://www.w3.org/2001/XMLSchema#string\">loading</AttributeValue>\n                     <AttributeDesignator Category=\"urn:oasis:names:tc:xacml:3.0:attribute-category:action\" AttributeId=\"urn:oasis:names:tc:xacml:1.0:action:action-id\" DataType=\"http://www.w3.org/2001/XMLSchema#string\" MustBePresent=\"true\" />\n                  </Match>\n               </AllOf>\n            </AnyOf>\n         </Target>\n      </Rule>\n      <Rule RuleId=\"red-zone\" Effect=\"Deny\">\n         <Description>There is no stopping in the red zone</Description>\n         <Target>\n            <AnyOf>\n               <AllOf>\n                  <Match MatchId=\"urn:oasis:names:tc:xacml:1.0:function:string-equal\">\n                     <AttributeValue DataType=\"http://www.w3.org/2001/XMLSchema#string\">red</AttributeValue>\n                     <AttributeDesignator Category=\"urn:oasis:names:tc:xacml:3.0:attribute-category:resource\" AttributeId=\"urn:thales:xacml:2.0:resource:sub-resource-id\" DataType=\"http://www.w3.org/2001/XMLSchema#string\" MustBePresent=\"true\" />\n                  </Match>\n               </AllOf>\n            </AnyOf>\n            <AnyOf>\n               <AllOf>\n                  <Match MatchId=\"urn:oasis:names:tc:xacml:1.0:function:string-equal\">\n                     <AttributeValue DataType=\"http://www.w3.org/2001/XMLSchema#string\">stopping</AttributeValue>\n                     <AttributeDesignator Category=\"urn:oasis:names:tc:xacml:3.0:attribute-category:action\" AttributeId=\"urn:oasis:names:tc:xacml:1.0:action:action-id\" DataType=\"http://www.w3.org/2001/XMLSchema#string\" MustBePresent=\"true\" />\n                  </Match>\n               </AllOf>\n            </AnyOf>\n         </Target>\n      </Rule>\n   </Policy>\n</PolicySet>\n"
						},
						"url": {
							"raw": "http://{{authzforce}}/authzforce-ce/domains/{{new-domain-id}}/pap/policies",
							"protocol": "http",
							"host": [
								"{{authzforce}}"
							],
							"path": [
								"authzforce-ce",
								"domains",
								"{{new-domain-id}}",
								"pap",
								"policies"
							]
						},
						"description": "To create a `PolicySet` for a given domain information in **Authzforce**, make a\nPOST request to the\n`/authzforce-ce/domains/{{domain-id}}/pap/policies` endpoint including the full set\nof XACML rules to upload.\n\nThe response contains the internal id of the policy held within **Authzforce** and \nversion information about the `PolicySet` versions available.\nThe rules of the new `PolicySet` will not be applied until the `PolicySet` is activated."
					},
					"response": []
				},
				{
					"name": "Activate the initial PolicySet",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/xml"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?><pdpPropertiesUpdate xmlns=\"http://authzforce.github.io/rest-api-model/xmlns/authz/5\"><rootPolicyRefExpression>f8194af5-8a07-486a-9581-c1f05d05483c</rootPolicyRefExpression></pdpPropertiesUpdate>"
						},
						"url": {
							"raw": "http://{{authzforce}}/authzforce-ce/domains/{{new-domain-id}}/pap/pdp.properties",
							"protocol": "http",
							"host": [
								"{{authzforce}}"
							],
							"path": [
								"authzforce-ce",
								"domains",
								"{{new-domain-id}}",
								"pap",
								"pdp.properties"
							]
						},
						"description": "To activate a `PolicySet`, make a PUT request to the\n`/authzforce-ce/domains/{domain-id}/pap/pdp.properties` endpoint including the `policy-id`\nto update within the `<rootPolicyRefExpresion>` attribute\n\nThe response returns information about the `PolicySet` applied."
					},
					"response": []
				},
				{
					"name": "Updating a Policy Set",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/xml",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<PolicySet xmlns=\"urn:oasis:names:tc:xacml:3.0:core:schema:wd-17\" PolicySetId=\"f8194af5-8a07-486a-9581-c1f05d05483c\" Version=\"2\" PolicyCombiningAlgId=\"urn:oasis:names:tc:xacml:3.0:policy-combining-algorithm:deny-unless-permit\">\n   <Description>Policy Set for Airplane!</Description>\n   <Target />\n   <Policy PolicyId=\"airplane\" Version=\"1.0\" RuleCombiningAlgId=\"urn:oasis:names:tc:xacml:3.0:rule-combining-algorithm:deny-unless-permit\">\n      <Description>Vehicle Roles from the Female announcer in the movie Airplane!</Description>\n      <Target>\n         <AnyOf>\n            <AllOf>\n               <Match MatchId=\"urn:oasis:names:tc:xacml:1.0:function:string-equal\">\n                  <AttributeValue DataType=\"http://www.w3.org/2001/XMLSchema#string\">airplane!</AttributeValue>\n                  <AttributeDesignator Category=\"urn:oasis:names:tc:xacml:3.0:attribute-category:resource\" AttributeId=\"urn:oasis:names:tc:xacml:1.0:resource:resource-id\" DataType=\"http://www.w3.org/2001/XMLSchema#string\" MustBePresent=\"true\" />\n               </Match>\n            </AllOf>\n         </AnyOf>\n      </Target>\n      <Rule RuleId=\"red-zone\" Effect=\"Permit\">\n         <Description>The red zone is for immediate loading and unloading of passengers only</Description>\n         <Target>\n            <AnyOf>\n               <AllOf>\n                  <Match MatchId=\"urn:oasis:names:tc:xacml:1.0:function:string-equal\">\n                     <AttributeValue DataType=\"http://www.w3.org/2001/XMLSchema#string\">red</AttributeValue>\n                     <AttributeDesignator Category=\"urn:oasis:names:tc:xacml:3.0:attribute-category:resource\" AttributeId=\"urn:thales:xacml:2.0:resource:sub-resource-id\" DataType=\"http://www.w3.org/2001/XMLSchema#string\" MustBePresent=\"true\" />\n                  </Match>\n               </AllOf>\n            </AnyOf>\n            <AnyOf>\n               <AllOf>\n                  <Match MatchId=\"urn:oasis:names:tc:xacml:1.0:function:string-equal\">\n                     <AttributeValue DataType=\"http://www.w3.org/2001/XMLSchema#string\">loading</AttributeValue>\n                     <AttributeDesignator Category=\"urn:oasis:names:tc:xacml:3.0:attribute-category:action\" AttributeId=\"urn:oasis:names:tc:xacml:1.0:action:action-id\" DataType=\"http://www.w3.org/2001/XMLSchema#string\" MustBePresent=\"true\" />\n                  </Match>\n               </AllOf>\n            </AnyOf>\n         </Target>\n      </Rule>\n      <Rule RuleId=\"white-zone\" Effect=\"Deny\">\n         <Description>There is no stopping in the white zone</Description>\n         <Target>\n            <AnyOf>\n               <AllOf>\n                  <Match MatchId=\"urn:oasis:names:tc:xacml:1.0:function:string-equal\">\n                     <AttributeValue DataType=\"http://www.w3.org/2001/XMLSchema#string\">white</AttributeValue>\n                     <AttributeDesignator Category=\"urn:oasis:names:tc:xacml:3.0:attribute-category:resource\" AttributeId=\"urn:thales:xacml:2.0:resource:sub-resource-id\" DataType=\"http://www.w3.org/2001/XMLSchema#string\" MustBePresent=\"true\" />\n                  </Match>\n               </AllOf>\n            </AnyOf>\n            <AnyOf>\n               <AllOf>\n                  <Match MatchId=\"urn:oasis:names:tc:xacml:1.0:function:string-equal\">\n                     <AttributeValue DataType=\"http://www.w3.org/2001/XMLSchema#string\">stopping</AttributeValue>\n                     <AttributeDesignator Category=\"urn:oasis:names:tc:xacml:3.0:attribute-category:action\" AttributeId=\"urn:oasis:names:tc:xacml:1.0:action:action-id\" DataType=\"http://www.w3.org/2001/XMLSchema#string\" MustBePresent=\"true\" />\n                  </Match>\n               </AllOf>\n            </AnyOf>\n         </Target>\n      </Rule>\n   </Policy>\n</PolicySet>\n"
						},
						"url": {
							"raw": "http://{{authzforce}}/authzforce-ce/domains/{{new-domain-id}}/pap/policies",
							"protocol": "http",
							"host": [
								"{{authzforce}}"
							],
							"path": [
								"authzforce-ce",
								"domains",
								"{{new-domain-id}}",
								"pap",
								"policies"
							]
						},
						"description": "To update a `PolicySet` for a given domain information in **Authzforce**, make a\nPOST request to the\n`/authzforce-ce/domains/{{domain-id}}/pap/policies` endpoint including the full set\nof XACML rules to upload. Note that the `Version` must be unique.\n\nThe response contains version information about the `PolicySet` versions available.\nThe rules of the new `PolicySet` will not be applied until the `PolicySet` is activated."
					},
					"response": []
				},
				{
					"name": "Activating an updated PolicySet",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/xml"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?><pdpPropertiesUpdate xmlns=\"http://authzforce.github.io/rest-api-model/xmlns/authz/5\"><rootPolicyRefExpression><%= policy_id %></rootPolicyRefExpression></pdpPropertiesUpdate>"
						},
						"url": {
							"raw": "http://{{authzforce}}/authzforce-ce/domains/{{new-domain-id}}/pap/pdp.properties",
							"protocol": "http",
							"host": [
								"{{authzforce}}"
							],
							"path": [
								"authzforce-ce",
								"domains",
								"{{new-domain-id}}",
								"pap",
								"pdp.properties"
							]
						},
						"description": "To update an active a `PolicySet`, make another PUT request to the\n`/authzforce-ce/domains/{domain-id}/pap/pdp.properties` endpoint including the `policy-id`\nto update within the `<rootPolicyRefExpresion>` attribute. The ruleset will be updated to\napply the latest uploaded version.\n\nThe response returns information about the `PolicySet` applied."
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "6bba1d42-8a2c-4d85-b103-5792ce90530f",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "64d519de-39c8-47bb-8e9e-00b2e3aff3ce",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Authzforce - Requesting Policy Decisions",
			"item": [
				{
					"name": "White Zone Permissions",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/xml",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<Request xmlns=\"urn:oasis:names:tc:xacml:3.0:core:schema:wd-17\" CombinedDecision=\"false\" ReturnPolicyIdList=\"false\">\n   <Attributes Category=\"urn:oasis:names:tc:xacml:3.0:attribute-category:resource\">\n      <Attribute AttributeId=\"urn:oasis:names:tc:xacml:1.0:resource:resource-id\" IncludeInResult=\"false\">\n         <AttributeValue DataType=\"http://www.w3.org/2001/XMLSchema#string\">airplane!</AttributeValue>\n      </Attribute>\n      <Attribute AttributeId=\"urn:thales:xacml:2.0:resource:sub-resource-id\" IncludeInResult=\"false\">\n         <AttributeValue DataType=\"http://www.w3.org/2001/XMLSchema#string\">white</AttributeValue>\n      </Attribute>\n   </Attributes>\n   <Attributes Category=\"urn:oasis:names:tc:xacml:3.0:attribute-category:action\">\n      <Attribute AttributeId=\"urn:oasis:names:tc:xacml:1.0:action:action-id\" IncludeInResult=\"false\">\n         <AttributeValue DataType=\"http://www.w3.org/2001/XMLSchema#string\">loading</AttributeValue>\n      </Attribute>\n   </Attributes>\n   <Attributes Category=\"urn:oasis:names:tc:xacml:3.0:attribute-category:environment\" />\n</Request>"
						},
						"url": {
							"raw": "http://{{authzforce}}/authzforce-ce/domains/{{new-domain-id}}/pdp",
							"protocol": "http",
							"host": [
								"{{authzforce}}"
							],
							"path": [
								"authzforce-ce",
								"domains",
								"{{new-domain-id}}",
								"pdp"
							]
						},
						"description": "To request a decision from Authzforce, make a POST request to the\n`domains/{domain-id}/pdp` endpoint. In this case the user has the\nis requesting access to `loading` in the `white` zone.\n\nThe response for the request includes a `<Decision>` element to `Permit` or `Deny` access to the resource."
					},
					"response": []
				},
				{
					"name": "Red Zone Permissions",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/xml",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<Request xmlns=\"urn:oasis:names:tc:xacml:3.0:core:schema:wd-17\" CombinedDecision=\"false\" ReturnPolicyIdList=\"false\">\n   <Attributes Category=\"urn:oasis:names:tc:xacml:3.0:attribute-category:resource\">\n      <Attribute AttributeId=\"urn:oasis:names:tc:xacml:1.0:resource:resource-id\" IncludeInResult=\"false\">\n         <AttributeValue DataType=\"http://www.w3.org/2001/XMLSchema#string\">airplane!</AttributeValue>\n      </Attribute>\n      <Attribute AttributeId=\"urn:thales:xacml:2.0:resource:sub-resource-id\" IncludeInResult=\"false\">\n         <AttributeValue DataType=\"http://www.w3.org/2001/XMLSchema#string\">red</AttributeValue>\n      </Attribute>\n   </Attributes>\n   <Attributes Category=\"urn:oasis:names:tc:xacml:3.0:attribute-category:action\">\n      <Attribute AttributeId=\"urn:oasis:names:tc:xacml:1.0:action:action-id\" IncludeInResult=\"false\">\n         <AttributeValue DataType=\"http://www.w3.org/2001/XMLSchema#string\">loading</AttributeValue>\n      </Attribute>\n   </Attributes>\n   <Attributes Category=\"urn:oasis:names:tc:xacml:3.0:attribute-category:environment\" />\n</Request>"
						},
						"url": {
							"raw": "http://{{authzforce}}/authzforce-ce/domains/{{new-domain-id}}/pdp",
							"protocol": "http",
							"host": [
								"{{authzforce}}"
							],
							"path": [
								"authzforce-ce",
								"domains",
								"{{new-domain-id}}",
								"pdp"
							]
						},
						"description": "To request a decision from Authzforce, make a POST request to the\n`domains/{domain-id}/pdp` endpoint. In this case the user has the\nis requesting access to `loading` in the `red` zone.\n\nThe response for the request includes a `<Decision>` element to `Permit` or `Deny` access to the resource."
					},
					"response": []
				}
			],
			"description": "For the purpose of this tutorial, **Authzforce** has been just been supplied\nwith a simple set of basic role-based rules in a similar fashion to the level 2\nauthorization example found in the previous Securing Access tutorial:\n\n-   The unlock door command can only be sent by **Security** staff.\n-   Access to the price-change and order-stock areas are only available to\n    **Managers**\n-   People with either the **Manager** or **Security** role can ring the bell\n-   Both **Manager** or **Security** can access and interact with the store data\n\nThe only difference is that access to all store entities is now restricted to\nusers with an assigned role rather than being based on level 1 authentication\naccess.\n\nTo request a decision from Authzforce, a structured request containing all\nrelevant information must be sent to the `domains/{domain-id}/pdp` endpoint. In\nthis case, the Body of the request includes information such as the roles that\nthe User has, the application id that is being requested\n(`tutorial-dckr-site-0000-xpresswebapp`) and the HTTP verb and resource that are\nbeing requested ( a GET request on the `/app/price-change` URL). Obviously the\ninformation passed in the Body can be expanded as the rules become more complex.",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "7b40d496-0a0f-424d-a300-d7a4c7946cf7",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "121f1a38-45b2-4245-9fdc-97dfd34c1f5b",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Keyrock - Administrating XACML Permissions",
			"item": [
				{
					"name": "Create token with Password",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"alice-the-admin@test.com\",\n  \"password\": \"test\"\n}"
						},
						"url": {
							"raw": "http://{{keyrock}}/v1/auth/tokens",
							"protocol": "http",
							"host": [
								"{{keyrock}}"
							],
							"path": [
								"v1",
								"auth",
								"tokens"
							]
						},
						"description": "Enter a username and password to enter the application. The default super-user has the values `alice-the-admin@test.com` and `test`.\n\nThe response header returns an `X-Subject-token` which identifies who has logged on the application.\nThis token is required in all subsequent requests to gain access"
					},
					"response": []
				},
				{
					"name": "Update a Permission",
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"disabled": true
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-Auth-token",
								"value": "{{X-Auth-token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"permission\": {\n    \"name\": \"Ring Alarm Bell\",\n    \"action\": \"POST\",\n    \"resource\": \"/ring\"\n  }\n}"
						},
						"url": {
							"raw": "http://{{keyrock}}/v1/applications/{{application-id}}/permissions/{{permission-id}}",
							"protocol": "http",
							"host": [
								"{{keyrock}}"
							],
							"path": [
								"v1",
								"applications",
								"{{application-id}}",
								"permissions",
								"{{permission-id}}"
							]
						},
						"description": "To amend the details of an existing permission, a  PATCH request is send to the `/applications/{{application-id}}/permissions/{permission-id}}`  endpoint.\n\nThe response contains a list of the fields which have been amended."
					},
					"response": []
				}
			],
			"description": "For the purpose of this tutorial, **Authzforce** has been just been supplied\nwith a simple set of basic role-based rules in a similar fashion to the level 2\nauthorization example found in the previous Securing Access tutorial:\n\n-   The unlock door command can only be sent by **Security** staff.\n-   Access to the price-change and order-stock areas are only available to\n    **Managers**\n-   People with either the **Manager** or **Security** role can ring the bell\n-   Both **Manager** or **Security** can access and interact with the store data\n\nThe only difference is that access to all store entities is now restricted to\nusers with an assigned role rather than being based on level 1 authentication\naccess.\n\nTo request a decision from Authzforce, a structured request containing all\nrelevant information must be sent to the `domains/{domain-id}/pdp` endpoint. In\nthis case, the Body of the request includes information such as the roles that\nthe User has, the application id that is being requested\n(`tutorial-dckr-site-0000-xpresswebapp`) and the HTTP verb and resource that are\nbeing requested ( a GET request on the `/app/price-change` URL). Obviously the\ninformation passed in the Body can be expanded as the rules become more complex.",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "7b40d496-0a0f-424d-a300-d7a4c7946cf7",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "121f1a38-45b2-4245-9fdc-97dfd34c1f5b",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "bf821021-7bc2-471e-9ab7-a55ecb9e663f",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "1269e342-1093-4844-83cb-f8fed192c512",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"id": "7d765f02-f758-4bdd-93fe-9205dae30ecb",
			"key": "authzforce",
			"value": "localhost:8080",
			"type": "string"
		},
		{
			"id": "ba442d8c-bfc2-4d91-ba6c-f88ddafb259f",
			"key": "keyrock",
			"value": "localhost:3005",
			"type": "string"
		},
		{
			"id": "0ca41603-d404-4fbe-a348-c9aeb0c2fa06",
			"key": "domain-id",
			"value": "gQqnLOnIEeiBFQJCrBIBDA",
			"type": "string"
		},
		{
			"id": "b8fe5bb4-4fa1-40ca-9659-07c79a56b66f",
			"key": "policy-id",
			"value": "f8194af5-8a07-486a-9581-c1f05d05483c",
			"type": "string"
		},
		{
			"id": "ed4a72d5-5b90-4180-aacf-3fdc8924c02c",
			"key": "Authorization",
			"value": "dHV0b3JpYWwtZGNrci1zaXRlLTAwMDAteHByZXNzd2ViYXBwOnR1dG9yaWFsLWRja3Itc2l0ZS0wMDAwLWNsaWVudHNlY3JldA==",
			"type": "string"
		},
		{
			"id": "b30e85aa-a1b6-48c6-8945-505de67e9353",
			"key": "access-token-bob",
			"value": "1b88827586409b3b4dc67378e6b945c99b94c6cf",
			"type": "string"
		},
		{
			"id": "e5b2f5d7-c1e5-4ff0-affb-304f55d1fb37",
			"key": "app-id",
			"value": "tutorial-dckr-site-0000-xpresswebapp",
			"type": "string"
		},
		{
			"id": "29751ac2-714f-4d1b-b53d-a8c9abde7db3",
			"key": "new-domain-id",
			"value": "LMyYuA6hEemB2wJCrBIBDA",
			"type": "string"
		}
	]
}