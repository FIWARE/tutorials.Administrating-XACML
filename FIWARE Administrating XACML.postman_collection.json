{
	"info": {
		"_postman_id": "59ce8a5e-c01f-4d7b-964e-64dd67f2fce5",
		"name": "FIWARE Administrating XACML",
		"description": "[![FIWARE Security](https://nexus.lab.fiware.org/repository/raw/public/badges/chapters/security.svg)](https://www.fiware.org/developers/catalogue/)\n\nThis tutorial introduces the administration of level 3 advanced authorization rules into **Keyrock**. The simple verb-resource based permissions are amended to use XACML and new XACML permissions added to the existing roles. The updated ruleset is automatically uploaded to **Authzforce** PDP, so that policy execution points such as the **PEP proxy** are able to apply the latest ruleset.\n\nThe tutorial demonstrates examples of interactions using the **Keyrock** GUI, as\nwell [cUrl](https://ec.haxx.se/) commands used to access the REST\nAPIs of **Keyrock**  and **Authzforce** \n\nThe `docker-compose` files for this tutorial can be found on GitHub: \n\n![GitHub](https://fiware.github.io/tutorials.Administrating-XACML/icon/GitHub-Mark-32px.png) [FIWARE 406: Administrating XACML](https://github.com/Fiware/tutorials.Administrating-XACML)\n\n# Administrating XACML Rules\n\n> **12.3 Central Terminal Area**\n>\n> * Red or Yellow Zone\n>    * No private vehicle shall stop, wait, or park in the red or yellow zone.\n> * White Zone\n>    * No vehicle shall stop, wait, or park in the white zone unless actively\n> engaged in the immediate loading or unloading of passengers\n> and/or baggage.\n>\n> — Los Angeles International Airport Rules and Regulations, Section 12 - Landside Motor Vehicle Operations\n\nBusiness rules change over time, and it is necessary to be able to amend access controls accordingly. The [previous tutorial](https://github.com/Fiware/tutorials.XACML-Access-Rules) included a previously generated XACML `<PolicySet>` loaded into **Authzforce**. Advanced authorization (level 3) access control offers great flexibility in that every policy decision is calculated on the fly so new rules can be applied under new circumstances. In order to do this it must be possible to load, update and activate a new  `<PolicySet>` whenever necessary. In order to do, this **Authzforce** offers a simple REST Policy Adminstration Point (PAP).\n\nThe [Authzforce](https://authzforce-ce-fiware.readthedocs.io/) Policy Decision Point (PDP) was discussed in the [previous tutorial](https://github.com/Fiware/tutorials.XACML-Access-Rules) - it interprets rules according to the\n[XACML standard](https://www.oasis-open.org/committees/tc_home.php?wg_abbrev=xacml), this offers a means to adjudicate on any access request provided that sufficient information can be supplied.\n\n\n\n## What is XACML\n\n\nThe PEP\n\n\n\n# Prerequisites\n\n## Docker\n\nTo keep things simple all components will be run using\n[Docker](https://www.docker.com). **Docker** is a container technology which\nallows to different components isolated into their respective environments.\n\n-   To install Docker on Windows follow the instructions\n    [here](https://docs.docker.com/docker-for-windows/)\n-   To install Docker on Mac follow the instructions\n    [here](https://docs.docker.com/docker-for-mac/)\n-   To install Docker on Linux follow the instructions\n    [here](https://docs.docker.com/install/)\n\n**Docker Compose** is a tool for defining and running multi-container Docker\napplications. A\n[YAML file](https://raw.githubusercontent.com/Fiware/tutorials.Identity-Management/master/docker-compose.yml)\nis used configure the required services for the application. This means all\ncontainer services can be brought up in a single command. Docker Compose is\ninstalled by default as part of Docker for Windows and Docker for Mac, however\nLinux users will need to follow the instructions found\n[here](https://docs.docker.com/compose/install/)\n\n## Cygwin\n\nWe will start up our services using a simple bash script. Windows users should\ndownload [cygwin](http://www.cygwin.com/) to provide a command-line\nfunctionality similar to a Linux distribution on Windows.\n\n# Architecture\n\nThis application adds OAuth2-driven security into the existing Stock Management\nand Sensors-based application created in\n[previous tutorials](https://github.com/Fiware/tutorials.IoT-Agent/) by using\nthe data created in the first\n[security tutorial](https://github.com/Fiware/tutorials.Identity-Management/)\nand reading it programmatically. It will make use of three FIWARE components -\nthe [Orion Context Broker](https://fiware-orion.readthedocs.io/en/latest/),the\n[IoT Agent for UltraLight 2.0](https://fiware-iotagent-ul.readthedocs.io/en/latest/)\nand integrates the use of the\n[Keyrock](https://fiware-idm.readthedocs.io/en/latest/) Generic enabler. Usage\nof the Orion Context Broker is sufficient for an application to qualify as\n_“Powered by FIWARE”_.\n\nBoth the Orion Context Broker and the IoT Agent rely on open source\n[MongoDB](https://www.mongodb.com/) technology to keep persistence of the\ninformation they hold. We will also be using the dummy IoT devices created in\nthe [previous tutorial](https://github.com/Fiware/tutorials.IoT-Sensors/).\n**Keyrock** uses its own [MySQL](https://www.mysql.com/) database.\n\nTherefore the overall architecture will consist of the following elements:\n\n-   The FIWARE\n    [Orion Context Broker](https://fiware-orion.readthedocs.io/en/latest/) which\n    will receive requests using\n    [NGSI](https://fiware.github.io/specifications/OpenAPI/ngsiv2)\n-   The FIWARE\n    [IoT Agent for UltraLight 2.0](https://fiware-iotagent-ul.readthedocs.io/en/latest/)\n    which will receive southbound requests using\n    [NGSI](https://fiware.github.io/specifications/OpenAPI/ngsiv2) and convert\n    them to\n    [UltraLight 2.0](https://fiware-iotagent-ul.readthedocs.io/en/latest/usermanual/index.html#user-programmers-manual)\n    commands for the devices\n-   FIWARE [Keyrock](https://fiware-idm.readthedocs.io/en/latest/) offer a\n    complement Identity Management System including:\n    -   An OAuth2 authentication system for Applications and Users\n    -   A site graphical frontend for Identity Management Administration\n    -   An equivalent REST API for Identity Management via HTTP requests\n\n-   FIWARE [Authzforce](https://fiware-pep-proxy.rtfd.io/) is a XACML Server providing an interpretive Policy Decision Point (PDP)\n    access to the **Orion** and/or **IoT Agent** microservices\n-   FIWARE [Wilma](https://fiware-pep-proxy.rtfd.io/) is a PEP Proxy securing\n    access to the **Orion** microservices, it requests authorisation decisions from **Authzforce**\n-   The underlying [MongoDB](https://www.mongodb.com/) database :\n    -   Used by the **Orion Context Broker** to hold context data information\n        such as data entities, subscriptions and registrations\n    -   Used by the **IoT Agent** to hold device information such as device URLs\n        and Keys\n-   A [MySQL](https://www.mysql.com/) database :\n    -   Used to persist user identities, applications, roles and permissions\n-   The **Stock Management Frontend** does the following:\n    -   Displays store information\n    -   Shows which products can be bought at each store\n    -   Allows users to \"buy\" products and reduce the stock count.\n    -   Allows authorized users into restricted areas, it requests authoriation decisions from **Authzforce**\n-   A webserver acting as set of\n    [dummy IoT devices](https://github.com/Fiware/tutorials.IoT-Sensors) using\n    the\n    [UltraLight 2.0](https://fiware-iotagent-ul.readthedocs.io/en/latest/usermanual/index.html#user-programmers-manual)\n    protocol running over HTTP - access to certain resources is restricted.\n\nSince all interactions between the elements are initiated by HTTP requests, the\nentities can be containerized and run from exposed ports.\n\n![](https://fiware.github.io/tutorials.Administrating-XACML/img/architecture.png)\n\n\nThe all container configuration values described in the YAML file\nhave been described in previous tutorials\n\n\n\n# Start Up\n\nTo start the installation, do the following:\n\n```console\ngit clone git@github.com:Fiware/tutorials.Administrating-XACML.git\ncd tutorials.Administrating-XACML\n\n./services create\n```\n\n> **Note** The initial creation of Docker images can take up to three minutes\n\nThereafter, all services can be initialized from the command-line by running the\n[services](https://github.com/Fiware/tutorials.Administrating-XACML/blob/master/services)\nBash script provided within the repository:\n\n```console\n./services start\n```\n\n\n> **Note:** If you want to clean up and start over again\n> you can do so with the following command:\n>\n> ```\n> ./services stop\n> ```\n\n### Dramatis Personae\n\nThe following people at `test.com` legitimately have accounts within the\nApplication\n\n-   Alice, she will be the Administrator of the **Keyrock** Application\n-   Bob, the Regional Manager of the supermarket chain - he has several store\n    managers under him:\n    -   Manager1\n    -   Manager2\n-   Charlie, the Head of Security of the supermarket chain - he has several\n    store detectives under him:\n    -   Detective1\n    -   Detective2\n\n| Name       | eMail                     | Password |\n| ---------- | ------------------------- | -------- |\n| alice      | alice-the-admin@test.com  | `test`   |\n| bob        | bob-the-manager@test.com  | `test`   |\n| charlie    | charlie-security@test.com | `test`   |\n| manager1   | manager1@test.com         | `test`   |\n| manager2   | manager2@test.com         | `test`   |\n| detective1 | detective1@test.com       | `test`   |\n| detective2 | detective2@test.com       | `test`   |\n\nThe following people at `example.com` have signed up for accounts, but have no\nreason to be granted access\n\n-   Eve - Eve the Eavesdropper\n-   Mallory - Mallory the malicious attacker\n-   Rob - Rob the Robber\n\n| Name    | eMail               | Password |\n| ------- | ------------------- | -------- |\n| eve     | eve@example.com     | `test`   |\n| mallory | mallory@example.com | `test`   |\n| rob     | rob@example.com     | `test`   |\n\n\n# XACML Administration\n\nTo apply an access control policy, it is necessary to be able to do the following:\n\na) Create a consistent `<PolicySet>`\nb) Supply a Policy Execution Point (PEP) which provides necessary data\n\nAs will be seen, **Keyrock** is able help with the first point, and custom code within the **PEP Proxy** can help with the second. **Authzforce** itself does not offer a UI, and is not concerned with generation and management of XACML policies - it assumes that each `<PolicySet>` it receives has already been generated by another component.\n\nFull-blown XACML editors are available, but the limited editor within **Keyrock** is usually sufficient for most access control scenarios.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Authzforce PAP - Adminstrating XACML Policies",
			"item": [
				{
					"name": "Creating a new Domain",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/xml",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n<domainProperties xmlns=\"http://authzforce.github.io/rest-api-model/xmlns/authz/5\" externalId=\"airplane\"/>"
						},
						"url": {
							"raw": "http://{{authzforce}}/authzforce-ce/domains",
							"protocol": "http",
							"host": [
								"{{authzforce}}"
							],
							"path": [
								"authzforce-ce",
								"domains"
							]
						},
						"description": "To create a new domain in **Authzforce**, make a POST request to the\n`/authzforce-ce/domains` endpoint including a unique `external-id` within\nthe `<domainProperties>` element\n\nThe response includes a `href` in the `<n2:link>` element  which holds the\n`domain-id` used internally within **Authzforce**.\n\nAn empty `PolicySet` will be created for the new domain. By default all\naccess will be permitted."
					},
					"response": []
				},
				{
					"name": "Creating an initial PolicySet",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/xml"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<PolicySet xmlns=\"urn:oasis:names:tc:xacml:3.0:core:schema:wd-17\" PolicySetId=\"f8194af5-8a07-486a-9581-c1f05d05483c\" Version=\"1\" PolicyCombiningAlgId=\"urn:oasis:names:tc:xacml:3.0:policy-combining-algorithm:deny-unless-permit\">\n   <Description>Policy Set for Airplane!</Description>\n   <Target />\n   <Policy PolicyId=\"airplane\" Version=\"1.0\" RuleCombiningAlgId=\"urn:oasis:names:tc:xacml:3.0:rule-combining-algorithm:deny-unless-permit\">\n      <Description>Vehicle Roles from the Male announcer in the movie Airplane!</Description>\n      <Target>\n         <AnyOf>\n            <AllOf>\n               <Match MatchId=\"urn:oasis:names:tc:xacml:1.0:function:string-equal\">\n                  <AttributeValue DataType=\"http://www.w3.org/2001/XMLSchema#string\">airplane!</AttributeValue>\n                  <AttributeDesignator Category=\"urn:oasis:names:tc:xacml:3.0:attribute-category:resource\" AttributeId=\"urn:oasis:names:tc:xacml:1.0:resource:resource-id\" DataType=\"http://www.w3.org/2001/XMLSchema#string\" MustBePresent=\"true\" />\n               </Match>\n            </AllOf>\n         </AnyOf>\n      </Target>\n      <Rule RuleId=\"white-zone\" Effect=\"Permit\">\n         <Description>The white zone is for immediate loading and unloading of passengers only</Description>\n         <Target>\n            <AnyOf>\n               <AllOf>\n                  <Match MatchId=\"urn:oasis:names:tc:xacml:1.0:function:string-equal\">\n                     <AttributeValue DataType=\"http://www.w3.org/2001/XMLSchema#string\">white</AttributeValue>\n                     <AttributeDesignator Category=\"urn:oasis:names:tc:xacml:3.0:attribute-category:resource\" AttributeId=\"urn:thales:xacml:2.0:resource:sub-resource-id\" DataType=\"http://www.w3.org/2001/XMLSchema#string\" MustBePresent=\"true\" />\n                  </Match>\n               </AllOf>\n            </AnyOf>\n            <AnyOf>\n               <AllOf>\n                  <Match MatchId=\"urn:oasis:names:tc:xacml:1.0:function:string-equal\">\n                     <AttributeValue DataType=\"http://www.w3.org/2001/XMLSchema#string\">loading</AttributeValue>\n                     <AttributeDesignator Category=\"urn:oasis:names:tc:xacml:3.0:attribute-category:action\" AttributeId=\"urn:oasis:names:tc:xacml:1.0:action:action-id\" DataType=\"http://www.w3.org/2001/XMLSchema#string\" MustBePresent=\"true\" />\n                  </Match>\n               </AllOf>\n            </AnyOf>\n         </Target>\n      </Rule>\n      <Rule RuleId=\"red-zone\" Effect=\"Deny\">\n         <Description>There is no stopping in the red zone</Description>\n         <Target>\n            <AnyOf>\n               <AllOf>\n                  <Match MatchId=\"urn:oasis:names:tc:xacml:1.0:function:string-equal\">\n                     <AttributeValue DataType=\"http://www.w3.org/2001/XMLSchema#string\">red</AttributeValue>\n                     <AttributeDesignator Category=\"urn:oasis:names:tc:xacml:3.0:attribute-category:resource\" AttributeId=\"urn:thales:xacml:2.0:resource:sub-resource-id\" DataType=\"http://www.w3.org/2001/XMLSchema#string\" MustBePresent=\"true\" />\n                  </Match>\n               </AllOf>\n            </AnyOf>\n            <AnyOf>\n               <AllOf>\n                  <Match MatchId=\"urn:oasis:names:tc:xacml:1.0:function:string-equal\">\n                     <AttributeValue DataType=\"http://www.w3.org/2001/XMLSchema#string\">stopping</AttributeValue>\n                     <AttributeDesignator Category=\"urn:oasis:names:tc:xacml:3.0:attribute-category:action\" AttributeId=\"urn:oasis:names:tc:xacml:1.0:action:action-id\" DataType=\"http://www.w3.org/2001/XMLSchema#string\" MustBePresent=\"true\" />\n                  </Match>\n               </AllOf>\n            </AnyOf>\n         </Target>\n      </Rule>\n   </Policy>\n</PolicySet>\n"
						},
						"url": {
							"raw": "http://{{authzforce}}/authzforce-ce/domains/{{new-domain-id}}/pap/policies",
							"protocol": "http",
							"host": [
								"{{authzforce}}"
							],
							"path": [
								"authzforce-ce",
								"domains",
								"{{new-domain-id}}",
								"pap",
								"policies"
							]
						},
						"description": "To create a `PolicySet` for a given domain information in **Authzforce**, make a\nPOST request to the\n`/authzforce-ce/domains/{{domain-id}}/pap/policies` endpoint including the full set\nof XACML rules to upload.\n\nFor this initial Policy, the following rules will be enforced\n\n* The **white** zone is for immediate loading and unloading of passengers only\n* There is no stopping in the **red** zone\n\nThe response contains the internal id of the policy held within **Authzforce** and \nversion information about the `PolicySet` versions available.\nThe rules of the new `PolicySet` will not be applied until the `PolicySet` is activated."
					},
					"response": []
				},
				{
					"name": "Activate the initial PolicySet",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/xml"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?><pdpPropertiesUpdate xmlns=\"http://authzforce.github.io/rest-api-model/xmlns/authz/5\"><rootPolicyRefExpression>f8194af5-8a07-486a-9581-c1f05d05483c</rootPolicyRefExpression></pdpPropertiesUpdate>"
						},
						"url": {
							"raw": "http://{{authzforce}}/authzforce-ce/domains/{{new-domain-id}}/pap/pdp.properties",
							"protocol": "http",
							"host": [
								"{{authzforce}}"
							],
							"path": [
								"authzforce-ce",
								"domains",
								"{{new-domain-id}}",
								"pap",
								"pdp.properties"
							]
						},
						"description": "To activate a `PolicySet`, make a PUT request to the\n`/authzforce-ce/domains/{domain-id}/pap/pdp.properties` endpoint including the `policy-id`\nto update within the `<rootPolicyRefExpresion>` attribute\n\nThe response returns information about the `PolicySet` applied."
					},
					"response": []
				},
				{
					"name": "Updating a Policy Set",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/xml"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<PolicySet xmlns=\"urn:oasis:names:tc:xacml:3.0:core:schema:wd-17\" PolicySetId=\"f8194af5-8a07-486a-9581-c1f05d05483c\" Version=\"2\" PolicyCombiningAlgId=\"urn:oasis:names:tc:xacml:3.0:policy-combining-algorithm:deny-unless-permit\">\n   <Description>Policy Set for Airplane!</Description>\n   <Target />\n   <Policy PolicyId=\"airplane\" Version=\"1.0\" RuleCombiningAlgId=\"urn:oasis:names:tc:xacml:3.0:rule-combining-algorithm:deny-unless-permit\">\n      <Description>Vehicle Roles from the Female announcer in the movie Airplane!</Description>\n      <Target>\n         <AnyOf>\n            <AllOf>\n               <Match MatchId=\"urn:oasis:names:tc:xacml:1.0:function:string-equal\">\n                  <AttributeValue DataType=\"http://www.w3.org/2001/XMLSchema#string\">airplane!</AttributeValue>\n                  <AttributeDesignator Category=\"urn:oasis:names:tc:xacml:3.0:attribute-category:resource\" AttributeId=\"urn:oasis:names:tc:xacml:1.0:resource:resource-id\" DataType=\"http://www.w3.org/2001/XMLSchema#string\" MustBePresent=\"true\" />\n               </Match>\n            </AllOf>\n         </AnyOf>\n      </Target>\n      <Rule RuleId=\"red-zone\" Effect=\"Permit\">\n         <Description>The red zone is for immediate loading and unloading of passengers only</Description>\n         <Target>\n            <AnyOf>\n               <AllOf>\n                  <Match MatchId=\"urn:oasis:names:tc:xacml:1.0:function:string-equal\">\n                     <AttributeValue DataType=\"http://www.w3.org/2001/XMLSchema#string\">red</AttributeValue>\n                     <AttributeDesignator Category=\"urn:oasis:names:tc:xacml:3.0:attribute-category:resource\" AttributeId=\"urn:thales:xacml:2.0:resource:sub-resource-id\" DataType=\"http://www.w3.org/2001/XMLSchema#string\" MustBePresent=\"true\" />\n                  </Match>\n               </AllOf>\n            </AnyOf>\n            <AnyOf>\n               <AllOf>\n                  <Match MatchId=\"urn:oasis:names:tc:xacml:1.0:function:string-equal\">\n                     <AttributeValue DataType=\"http://www.w3.org/2001/XMLSchema#string\">loading</AttributeValue>\n                     <AttributeDesignator Category=\"urn:oasis:names:tc:xacml:3.0:attribute-category:action\" AttributeId=\"urn:oasis:names:tc:xacml:1.0:action:action-id\" DataType=\"http://www.w3.org/2001/XMLSchema#string\" MustBePresent=\"true\" />\n                  </Match>\n               </AllOf>\n            </AnyOf>\n         </Target>\n      </Rule>\n      <Rule RuleId=\"white-zone\" Effect=\"Deny\">\n         <Description>There is no stopping in the white zone</Description>\n         <Target>\n            <AnyOf>\n               <AllOf>\n                  <Match MatchId=\"urn:oasis:names:tc:xacml:1.0:function:string-equal\">\n                     <AttributeValue DataType=\"http://www.w3.org/2001/XMLSchema#string\">white</AttributeValue>\n                     <AttributeDesignator Category=\"urn:oasis:names:tc:xacml:3.0:attribute-category:resource\" AttributeId=\"urn:thales:xacml:2.0:resource:sub-resource-id\" DataType=\"http://www.w3.org/2001/XMLSchema#string\" MustBePresent=\"true\" />\n                  </Match>\n               </AllOf>\n            </AnyOf>\n            <AnyOf>\n               <AllOf>\n                  <Match MatchId=\"urn:oasis:names:tc:xacml:1.0:function:string-equal\">\n                     <AttributeValue DataType=\"http://www.w3.org/2001/XMLSchema#string\">stopping</AttributeValue>\n                     <AttributeDesignator Category=\"urn:oasis:names:tc:xacml:3.0:attribute-category:action\" AttributeId=\"urn:oasis:names:tc:xacml:1.0:action:action-id\" DataType=\"http://www.w3.org/2001/XMLSchema#string\" MustBePresent=\"true\" />\n                  </Match>\n               </AllOf>\n            </AnyOf>\n         </Target>\n      </Rule>\n   </Policy>\n</PolicySet>\n"
						},
						"url": {
							"raw": "http://{{authzforce}}/authzforce-ce/domains/{{new-domain-id}}/pap/policies",
							"protocol": "http",
							"host": [
								"{{authzforce}}"
							],
							"path": [
								"authzforce-ce",
								"domains",
								"{{new-domain-id}}",
								"pap",
								"policies"
							]
						},
						"description": "To update a `PolicySet` for a given domain information in **Authzforce**, make a\nPOST request to the\n`/authzforce-ce/domains/{{domain-id}}/pap/policies` endpoint including the full set\nof XACML rules to upload. Note that the `Version` must be unique.\n\nFor the updated Policy, the previous rules will be reversed\n\n* The **red** zone is for immediate loading and unloading of passengers only\n* There is no stopping in the **white** zone\n\nThe response contains version information about the `PolicySet` versions available.\nThe rules of the new `PolicySet` will not be applied until the `PolicySet` is activated."
					},
					"response": []
				},
				{
					"name": "Activating an updated PolicySet",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/xml"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?><pdpPropertiesUpdate xmlns=\"http://authzforce.github.io/rest-api-model/xmlns/authz/5\"><rootPolicyRefExpression>f8194af5-8a07-486a-9581-c1f05d05483c</rootPolicyRefExpression></pdpPropertiesUpdate>"
						},
						"url": {
							"raw": "http://{{authzforce}}/authzforce-ce/domains/{{new-domain-id}}/pap/pdp.properties",
							"protocol": "http",
							"host": [
								"{{authzforce}}"
							],
							"path": [
								"authzforce-ce",
								"domains",
								"{{new-domain-id}}",
								"pap",
								"pdp.properties"
							]
						},
						"description": "To update an active a `PolicySet`, make another PUT request to the\n`/authzforce-ce/domains/{domain-id}/pap/pdp.properties` endpoint including the `policy-id`\nto update within the `<rootPolicyRefExpresion>` attribute. The ruleset will be updated to\napply the latest uploaded version.\n\nThe response returns information about the `PolicySet` applied."
					},
					"response": []
				}
			],
			"description": "**Authzforce** can act as a Policy Administration Point (PAP), this means that PolicySets can be created and amended using API calls directly to **Authzforce**\n\nHowever there is no GUI for creating or amending a `<PolicySet>`, and no generation tool. All CRUD actions occur on the `<PolicySet>` level.",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "6bba1d42-8a2c-4d85-b103-5792ce90530f",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "64d519de-39c8-47bb-8e9e-00b2e3aff3ce",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Authzforce PDP - Requesting Policy Decisions",
			"item": [
				{
					"name": "White Zone Permissions",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/xml",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<Request xmlns=\"urn:oasis:names:tc:xacml:3.0:core:schema:wd-17\" CombinedDecision=\"false\" ReturnPolicyIdList=\"false\">\n   <Attributes Category=\"urn:oasis:names:tc:xacml:3.0:attribute-category:resource\">\n      <Attribute AttributeId=\"urn:oasis:names:tc:xacml:1.0:resource:resource-id\" IncludeInResult=\"false\">\n         <AttributeValue DataType=\"http://www.w3.org/2001/XMLSchema#string\">airplane!</AttributeValue>\n      </Attribute>\n      <Attribute AttributeId=\"urn:thales:xacml:2.0:resource:sub-resource-id\" IncludeInResult=\"false\">\n         <AttributeValue DataType=\"http://www.w3.org/2001/XMLSchema#string\">white</AttributeValue>\n      </Attribute>\n   </Attributes>\n   <Attributes Category=\"urn:oasis:names:tc:xacml:3.0:attribute-category:action\">\n      <Attribute AttributeId=\"urn:oasis:names:tc:xacml:1.0:action:action-id\" IncludeInResult=\"false\">\n         <AttributeValue DataType=\"http://www.w3.org/2001/XMLSchema#string\">loading</AttributeValue>\n      </Attribute>\n   </Attributes>\n   <Attributes Category=\"urn:oasis:names:tc:xacml:3.0:attribute-category:environment\" />\n</Request>"
						},
						"url": {
							"raw": "http://{{authzforce}}/authzforce-ce/domains/{{new-domain-id}}/pdp",
							"protocol": "http",
							"host": [
								"{{authzforce}}"
							],
							"path": [
								"authzforce-ce",
								"domains",
								"{{new-domain-id}}",
								"pdp"
							]
						},
						"description": "To request a decision from Authzforce, make a POST request to the\n`domains/{domain-id}/pdp` endpoint. In this case the user has the\nis requesting access to `loading` in the `white` zone.\n\nThe response for the request includes a `<Decision>` element to `Permit` or `Deny` access to the resource."
					},
					"response": []
				},
				{
					"name": "Red Zone Permissions",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/xml",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<Request xmlns=\"urn:oasis:names:tc:xacml:3.0:core:schema:wd-17\" CombinedDecision=\"false\" ReturnPolicyIdList=\"false\">\n   <Attributes Category=\"urn:oasis:names:tc:xacml:3.0:attribute-category:resource\">\n      <Attribute AttributeId=\"urn:oasis:names:tc:xacml:1.0:resource:resource-id\" IncludeInResult=\"false\">\n         <AttributeValue DataType=\"http://www.w3.org/2001/XMLSchema#string\">airplane!</AttributeValue>\n      </Attribute>\n      <Attribute AttributeId=\"urn:thales:xacml:2.0:resource:sub-resource-id\" IncludeInResult=\"false\">\n         <AttributeValue DataType=\"http://www.w3.org/2001/XMLSchema#string\">red</AttributeValue>\n      </Attribute>\n   </Attributes>\n   <Attributes Category=\"urn:oasis:names:tc:xacml:3.0:attribute-category:action\">\n      <Attribute AttributeId=\"urn:oasis:names:tc:xacml:1.0:action:action-id\" IncludeInResult=\"false\">\n         <AttributeValue DataType=\"http://www.w3.org/2001/XMLSchema#string\">loading</AttributeValue>\n      </Attribute>\n   </Attributes>\n   <Attributes Category=\"urn:oasis:names:tc:xacml:3.0:attribute-category:environment\" />\n</Request>"
						},
						"url": {
							"raw": "http://{{authzforce}}/authzforce-ce/domains/{{new-domain-id}}/pdp",
							"protocol": "http",
							"host": [
								"{{authzforce}}"
							],
							"path": [
								"authzforce-ce",
								"domains",
								"{{new-domain-id}}",
								"pdp"
							]
						},
						"description": "To request a decision from Authzforce, make a POST request to the\n`domains/{domain-id}/pdp` endpoint. In this case the user has the\nis requesting access to `loading` in the `red` zone.\n\nThe response for the request includes a `<Decision>` element to `Permit` or `Deny` access to the resource."
					},
					"response": []
				}
			],
			"description": "At several points within this tutorial, a Policy Decision can be requested using **Authzforce**.\n\nThe simple `<PolicySet>` used consists of two rules:\n\n* The **red** zone is for immediate loading and unloading of passengers only\n* There is no stopping in the **white** zone\n\nThe updated policy switches the zones used. \n\n\nTo request a decision from Authzforce, a structured request containing all\nrelevant information must be sent to the `domains/{domain-id}/pdp` endpoint. In\nthis case, the Body of the request must include sufficient information so that\nthe access request can be adjudicated.",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "7b40d496-0a0f-424d-a300-d7a4c7946cf7",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "121f1a38-45b2-4245-9fdc-97dfd34c1f5b",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Keyrock PAP - Administrating XACML Permissions",
			"item": [
				{
					"name": "Create token with Password",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"alice-the-admin@test.com\",\n  \"password\": \"test\"\n}"
						},
						"url": {
							"raw": "http://{{keyrock}}/v1/auth/tokens",
							"protocol": "http",
							"host": [
								"{{keyrock}}"
							],
							"path": [
								"v1",
								"auth",
								"tokens"
							]
						},
						"description": "Enter a username and password to enter the application. The default super-user has the values `alice-the-admin@test.com` and `test`.\n\nThe response header returns an `X-Subject-token` which identifies who has logged on the application.\nThis token is required in all subsequent requests to gain access"
					},
					"response": []
				},
				{
					"name": "Update an XACML Permission",
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"disabled": true
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-Auth-token",
								"value": "{{X-Auth-token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"permission\": {\n    \"name\": \"Ring Alarm Bell\",\n    \"action\": \"POST\",\n    \"resource\": \"/ring\"\n  }\n}"
						},
						"url": {
							"raw": "http://{{keyrock}}/v1/applications/{{application-id}}/permissions/{{permission-id}}",
							"protocol": "http",
							"host": [
								"{{keyrock}}"
							],
							"path": [
								"v1",
								"applications",
								"{{application-id}}",
								"permissions",
								"{{permission-id}}"
							]
						},
						"description": "To amend the details of an existing permission, a  PATCH request is send to the `/applications/{{application-id}}/permissions/{permission-id}}`  endpoint.\n\nThe response contains a list of the fields which have been amended."
					},
					"response": []
				}
			],
			"description": "**Keyrock** offers a role based access control identity management system. Therefore every permission is only accessible to  users within a given role. We have already seen how Verb-Resource rules can be [set-up](https://github.com/Fiware/tutorials.Roles-Permissions/)) and [enforced](https://github.com/Fiware/tutorials.Securing-Access/)) using the basic authorization (level 2) access control mechanism found within Keyrock, the data for defining an advanced permission can also be administed using the **Keyrock** GUI or via **Keyrock** REST API requests.\n\n**Keyrock** permissions work on individual XACML `<Rule>` elements rather than a complete `<PolicySet>`. The `<PolicySet>` is generated by combining all the roles and permissions.",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "7b40d496-0a0f-424d-a300-d7a4c7946cf7",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "121f1a38-45b2-4245-9fdc-97dfd34c1f5b",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "bf821021-7bc2-471e-9ab7-a55ecb9e663f",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "1269e342-1093-4844-83cb-f8fed192c512",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"id": "6fd56901-46bc-416a-96d9-1c93e28ca161",
			"key": "authzforce",
			"value": "localhost:8080",
			"type": "string"
		},
		{
			"id": "c0f00b77-626f-4c54-8704-bd2e8efb2fde",
			"key": "keyrock",
			"value": "localhost:3005",
			"type": "string"
		},
		{
			"id": "eb98d4b0-2653-46f5-822a-2ac374b35b42",
			"key": "domain-id",
			"value": "gQqnLOnIEeiBFQJCrBIBDA",
			"type": "string"
		},
		{
			"id": "ed844fb3-7c2b-480a-9826-d5e7df7ef61e",
			"key": "policy-id",
			"value": "f8194af5-8a07-486a-9581-c1f05d05483c",
			"type": "string"
		},
		{
			"id": "5794142f-42d7-4db5-b1b5-a927f5214929",
			"key": "Authorization",
			"value": "dHV0b3JpYWwtZGNrci1zaXRlLTAwMDAteHByZXNzd2ViYXBwOnR1dG9yaWFsLWRja3Itc2l0ZS0wMDAwLWNsaWVudHNlY3JldA==",
			"type": "string"
		},
		{
			"id": "c3d94767-25c2-417d-be9a-029c7dbc551f",
			"key": "access-token-bob",
			"value": "1b88827586409b3b4dc67378e6b945c99b94c6cf",
			"type": "string"
		},
		{
			"id": "53e3014d-80fa-4ce6-b302-6ad3a7e369b9",
			"key": "app-id",
			"value": "tutorial-dckr-site-0000-xpresswebapp",
			"type": "string"
		},
		{
			"id": "51b94a55-a193-4df4-bab8-f1b565b2dbf4",
			"key": "new-domain-id",
			"value": "Sv-RRw9vEem6UQJCrBIBDA",
			"type": "string"
		}
	]
}